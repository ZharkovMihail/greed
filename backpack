#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <string>
using namespace std;
typedef struct les {
	double weight;
	double cost;
	double value ;
	string bla;
}les;

void quickSortR(les* a, int N) {

	long i = 0, j = N;
	double temp, p;
	p = a[N >> 1].value;
	les temp1;

	do {
		while (a[i].value < p) i++;
		while (a[j].value > p) j--;

		if (i <= j) {
			temp1 = a[i]; a[i] = a[j]; a[j] = temp1;
			i++; j--;
		}
	} while (i <= j);

	if (j > 0) quickSortR(a, j);
	if (N > i) quickSortR(a + i, N - i);
}
int main() {
	int n,W,x;
	cin >> W;
	cin >> n;
	les *mas = new les[n];
	string st2;
	getline(cin, st2);
	for (int i = 0; i < n; i++) {
		string st1;	
		getline(cin, st1);
		int g = st1.length();
		string r, r2, r1;
		int j;

		for (j = 0; j < g; j++) {
			if (st1[j] == ' ') {
				break;
			}
			r = r + st1[j];
		}
		mas[i].weight = atoi(r.c_str());
		j++;
		for (j; j < g; j++) {
			if (st1[j] == ' ') {
				break;
			}
			r1 = r1 + st1[j];
		}
		mas[i].cost = atoi(r1.c_str());
		j++;
		for (j; j < g; j++) {
			r2 = r2 + st1[j];
		}
		mas[i].bla = r2;
		double x = mas[i].cost / mas[i].weight;
		mas[i].value = x;
	}
	quickSortR(mas, n - 1);
	int finmax;
	for (int i = n-1; i >0; i--) {
		finmax = mas[i].weight;
		if (finmax <= W) {
			cout << mas[i].bla;
			W = W - finmax;
		}
	}
	return 0;
}
